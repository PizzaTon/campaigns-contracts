#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./utils.fc";
#include "./params.fc";
#include "./jetton-utils.fc";
#include "./constants.fc";

(int, int, slice, slice, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; min burn amount
        ds~load_coins(), ;; burn storage
        PTJ_JETTON_ID, ;; jetton id (name)
        ds~load_msg_addr(), ;; owner_address
        ds~load_msg_addr(), ;; second_owner
        ds~load_ref(), ;; master_address and jetton_wallet_code
        ds~load_ref(), ;; factors
        ds~load_ref() ;; exchange_rate
    );
}

() save_data(int min_burn, int burn_storage, slice owner_address, slice second_owner, slice jetton_master_address, cell jetton_wallet_code, cell factors, cell exchange_rate) impure inline {
    set_data(
        begin_cell()
        .store_coins(min_burn)
        .store_coins(burn_storage)
        .store_uint(PTJ_JETTON_ID, 64)
        .store_slice(owner_address)
        .store_slice(second_owner)
        .store_ref(
            begin_cell()
            .store_slice(jetton_master_address)
            .store_ref(jetton_wallet_code)
            .end_cell()
        )
        .store_ref(factors)
        .store_ref(exchange_rate)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int min_burn, int burn_storage, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();

    slice jetton_wallet_slice = jetton_wallet.begin_parse();
    slice jetton_master_address = jetton_wallet_slice~load_msg_addr();
    cell jetton_wallet_code = jetton_wallet_slice~load_ref();

    if (op == op::jetton_transfer_notification()) {
        ;; jetton transfer notification
        cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
        slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
        throw_unless(501, equal_slices(jetton_wallet_address, sender_address));

        int amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        cell forward_payload = in_msg_body~load_maybe_ref();

        throw_if(502, cell_null?(forward_payload));

        slice payload = forward_payload.begin_parse();
        slice nft_address = payload~load_msg_addr();

        ;; unpack factors
        slice factors_slice = factors.begin_parse();
        (int fee_factor, int fee_base, int burn_factor, int burn_base, int price_factor, int price_base) = (factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16));

        ;; calculate system's fee
        int system_fee = muldiv(fee_factor, amount, fee_base);
        ;; calculate net forward jetton
        int net_amount = amount - system_fee;

        ;; transfer jettons to the campaign
        cell msg = begin_cell()
        .store_uint(op::jetton_transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(net_amount) ;; jetton amount
        .store_slice(nft_address) ;; destination
        .store_slice(nft_address) ;; response_address (maybe replace with from_address)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();
        var msg_body = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(50000000)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg);
        send_raw_message(msg_body.end_cell(), 0);

        ;; calculate burn amount
        int burn_amount = muldiv(burn_factor, amount, burn_base);

        ;; send hurray to the campaign and to update it's balance map
        send_hurray(sender_address, nft_address, 20000000, PTJ_JETTON_ID, net_amount, query_id);

        ;; burn the amount
        if (burn_amount > 0) {
            if (burn_storage + burn_amount >= min_burn) {
                builder burn_msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_wallet_address)
                .store_coins(fwd_fee + 3 * gas_consumption())
                .store_uint(1, 107)
                .store_ref(
                    begin_cell()
                    .store_uint(op::burn_jetton(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(burn_storage + burn_amount)
                    .store_slice(my_address()) ;; check this later
                    .store_maybe_ref(null())
                    .end_cell()
                );
                send_raw_message(burn_msg.end_cell(), 1);
                burn_storage = 0;
            } else {
                burn_storage += burn_amount;
            }

            save_data(min_burn, burn_storage, owner_address, second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);
        }

        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == op::contract_upgrade()) { ;; update code & data
        set_code(in_msg_body~load_ref());
        cell data = in_msg_body~load_maybe_ref();
        if (~ cell_null?(data)) {
            set_data(data);
        }
        return ();
    }

    if (op == op::update_owner()) { ;; change owner_address
        save_data(min_burn, burn_storage, in_msg_body~load_msg_addr(), second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);
        return ();
    }

    if (op == op::update_second_owner()) { ;; change second_owner address
        save_data(min_burn, burn_storage, owner_address, in_msg_body~load_msg_addr(), jetton_master_address, jetton_wallet_code, factors, exchange_rate);
        return ();
    }

    if (op == op::update_factors()) { ;; update factors
        save_data(min_burn, burn_storage, owner_address, second_owner, jetton_master_address, jetton_wallet_code, in_msg_body~load_ref(), exchange_rate);
        return ();
    }

    throw(0xffff);
}

;; Getters


(cell) get_exchange_rate() method_id {
    (int min_burn, int burn_storage, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
    return (exchange_rate);
}

(int, int) get_burn_details() method_id {
    (int min_burn, int burn_storage, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
    return (min_burn, burn_storage);
}

(cell) get_factors() method_id {
    (int min_burn, int burn_storage, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
    return (factors);
}

(slice, slice) get_addresses() method_id {
    (int min_burn, int burn_storage, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
    return (owner_address, second_owner);
}
