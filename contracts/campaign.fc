#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./params.fc";
#include "./utils.fc";

;;
;;  TON NFT Item editable Smart Contract v2
;;  support ownership_assigned on minting nft
;;

{-

    NOTE that this tokens can be transferred within the same workchain.

    This is suitable for most tokens, if you need tokens transferable between workchains there are two solutions:

    1) use more expensive but universal function to calculate message forward fee for arbitrary destination (see `misc/forward-fee-calc.cs`)

    2) use token holder proxies in target workchain (that way even 'non-universal' token can be used from any workchain)

-}

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;  uint64 revoked_at
;;  uint64 active_until
;;  coins target
;;

(int, int, slice, slice, cell, int, int, int, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref(), ds~load_uint(64), ds~load_uint(64), ds~load_int(1), ds~load_dict(), ds~load_dict());
    } else {
        return (0, index, collection_address, null(), null(), 0, 0, -1, null(), new_dict()); ;; nft not initialized yet
    }
}

;; status = [close= 0, open= -1]
() store_data(int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) impure {
    set_data(
        begin_cell()
        .store_uint(index, 64)
        .store_slice(collection_address)
        .store_slice(owner_address)
        .store_ref(content)
        .store_uint(revoked_at, 64)
        .store_uint(active_until, 64)
        .store_int(status, 1)
        .store_dict(routers)
        .store_dict(balances)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr();

    (int init?, int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) = load_data();
    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        (slice new_owner, active_until, status, routers) = (in_msg_body~load_msg_addr(), in_msg_body~load_uint(64), in_msg_body~load_int(1), in_msg_body~load_dict());
        slice new_owner_address = new_owner;
        int sender = new_owner_address.skip_bits(11).preload_uint(256);

        store_data(index, collection_address, new_owner, begin_cell()
        .store_slice(to_string(index))
        .store_slice(begin_cell().store_uint("/"u, 8).end_cell().begin_parse())
        .store_slice(to_string(sender))
        .end_cell(), revoked_at, active_until, status, routers, balances);

        if (in_msg_body.slice_data_empty?() == false) {
            var forward_amount = in_msg_body~load_coins();
            if (forward_amount) {
                send_msg(flag::regular(), new_owner, forward_amount, op::ownership_assigned(), 0, begin_cell().store_slice(collection_address).store_slice(in_msg_body), 3); ;; paying fees, ignore errors
            }
        }
        return ();
    }

    int op = in_msg_body~load_uint(32);

    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        op = in_msg_body~load_uint(32);

        if (op == op::ownership_proof()) {
            int query_id = in_msg_body~load_uint(64);
            ;; mode 64 = carry all the remaining value of the inbound message
            send_msg(flag::regular(), owner_address, 0, op::ownership_proof_bounced(), query_id, null(), 64);
        }
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    ;; SBT related operations
    if (op == op::request_owner()) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
        .store_uint(index, 256)
        .store_slice(sender_address)
        .store_slice(owner_address)
        .store_ref(body)
        .store_uint(revoked_at, 64)
        .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::owner_info(), query_id, msg, 64);
        return ();
    }
    if (op == op::destroy()) {
        throw_unless(401, equal_slices(sender_address, collection_address));

        send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);

        owner_address = null_addr();
        ;; remove it from collection
        collection_address = null_addr();

        store_data(index, collection_address, owner_address, content, revoked_at, active_until, status, routers, balances);
        return ();
    }
    if (op == op::revoke()) {
        throw_unless(401, equal_slices(collection_address, sender_address));
        throw_unless(403, revoked_at == 0);

        revoked_at = now();
        store_data(index, collection_address, owner_address, content, revoked_at, active_until, status, routers, balances);
        return ();
    }
    if (op == op::take_excess()) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        ;; reserve amount for storage
        raw_reserve(min_tons_for_storage(), 0);

        send_msg(flag::regular(), sender_address, 0, op::excesses(), query_id, null(), 128);
        return ();
    }
    if (op == op::prove_ownership()) {
        throw_unless(401, equal_slices(owner_address, sender_address));

        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);

        var msg = begin_cell()
        .store_uint(index, 256)
        .store_slice(owner_address)
        .store_ref(body)
        .store_uint(revoked_at, 64)
        .store_uint(with_content, 1);

        if (with_content != 0) {
            msg = msg.store_ref(content);
        }

        ;; mode 64 = carry all the remaining value of the inbound message
        send_msg(flag::regular() | flag::bounce(), dest, 0, op::ownership_proof(), query_id, msg, 64);
        return ();
    }

    ;; react to the jetton transfer notification
    if (op == op::jetton_transfer_notification()) {
        int amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        cell forward_payload = in_msg_body~load_maybe_ref();

        cell msg = begin_cell()
        .store_uint(op::jetton_transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(amount) ;; jetton amount
        .store_slice(owner_address) ;; destination
        .store_slice(from_address) ;; response_address (maybe replace with from_address)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();

        var msg_body = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg);
        send_raw_message(msg_body.end_cell(), 64);
        return ();
    }

    ;; NFT related operations
    if (op == op::transfer()) {
        throw(413);
    }

    if (op == op::get_static_data()) { ;; get static data
        send_msg(flag::regular(), sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }

    ;; Requests from Router
    if (op == op::hurray()) { ;; donation successfully received
        throw_if(500, status == 0);

        ;; sender must be a valid router
        int sender_id = sender_address.skip_bits(11).preload_uint(256);
        (cell jetton, int flag) = routers.udict_get_ref?(256, sender_id);
        throw_unless(501, flag);

        if (cell_null?(balances)) {
            balances = new_dict();
        }

        int amount = in_msg_body~load_coins();
        int jetton_id = in_msg_body~load_uint(64);

        (slice balance, int flag) = balances.udict_get?(64, jetton_id);
        if(flag) {
            balances~udict_set(64, jetton_id, begin_cell().store_coins(balance~load_coins() + amount).end_cell().begin_parse());
        } else {
            balances~udict_set(64, jetton_id, begin_cell().store_coins(amount).end_cell().begin_parse());
        }

        store_data(index, collection_address, owner_address, content, revoked_at, active_until, status, routers, balances);
        return ();
    }
    if (op == op::hurray_ton()) { ;; donation successfully received
        throw_if(500, status == 0);

        ;; sender must be a valid router
        int sender_id = sender_address.skip_bits(11).preload_uint(256);
        (cell jetton, int flag) = routers.udict_get_ref?(256, sender_id);
        throw_unless(501, flag);

        if (cell_null?(balances)) {
            balances = new_dict();
        }

        int amount = msg_value;
        slice jetton_slice = jetton.begin_parse();
        int jetton_id = jetton_slice~load_uint(64);
        (slice balance, int flag) = balances.udict_get?(64, jetton_id);

        if(flag) {
            balances~udict_set(64, jetton_id, begin_cell().store_coins(balance~load_coins() + amount).end_cell().begin_parse());
        } else {
            balances~udict_set(64, jetton_id, begin_cell().store_coins(amount).end_cell().begin_parse());
        }

        raw_reserve(50000000, 0);
        builder msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(owner_address)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(
            begin_cell()
            .store_uint(0, 32)
            .store_builder(
                begin_cell().store_slice("PIZZATON DONATION")
            )
            .end_cell()
        );
        send_raw_message(msg.end_cell(), 128);

        store_data(index, collection_address, owner_address, content, revoked_at, active_until, status, routers, balances);
        return ();
    }

    ;; Requests from collection
    if (op == op::close_campaign()) {
        throw_unless(401, equal_slices(sender_address, collection_address));
        store_data(index, collection_address, owner_address, content, revoked_at, active_until, 0, routers, balances);
        return ();
    }
    if (op == op::open_campaign()) {
        throw_unless(401, equal_slices(sender_address, collection_address));
        store_data(index, collection_address, owner_address, content, revoked_at, active_until, -1, routers, balances);
        return ();
    }
    if (op == op::contract_upgrade()) {
        throw_unless(401, equal_slices(sender_address, collection_address));

        cell new_code = in_msg_body~load_ref();
        set_code(new_code);

        cell new_data = in_msg_body~load_maybe_ref();
        ifnot (new_data.null?()) {
            set_data(new_data);
        }

        return ();
    }

    if (op == op::upgrade_routers()) { ;; upgrade_routers
        throw_unless(401, equal_slices(sender_address, collection_address));
        slice real_owner = in_msg_body~load_msg_addr();
        throw_unless(402, equal_slices(real_owner, owner_address));

        cell new_routers = in_msg_body~load_ref();

        store_data(index, collection_address, owner_address, content, revoked_at, active_until, status, new_routers, balances);
        return ();
    }

    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) = load_data();
    return (init?, index, collection_address, owner_address, content);
}

(int, int) get_campaign_data() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) = load_data();
    return (active_until, status);
}

(cell) get_routers() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) = load_data();
    return (routers);
}

(cell) get_balances() method_id {
    (int init?, int index, slice collection_address, slice owner_address, cell content, int revoked_at, int active_until, int status, cell routers, cell balances) = load_data();
    return (balances);
}
