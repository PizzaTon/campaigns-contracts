#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./params.fc";
#include "./utils.fc";
#include "nft-utils.fc";

(slice, int, cell, cell, cell, slice, cell) load_data() inline {
  var ds = get_data().begin_parse();
  var owner = ds~load_msg_addr();
  var next_id = ds~load_uint(64);
  var second_owner = owner;
  if (ds.slice_data_empty?() == false) {
    second_owner = ds~load_msg_addr();
  }
  return
    (owner, ;; owner_address
     next_id, ;; next_item_index
     ds~load_ref(), ;; content
     ds~load_ref(), ;; nft_item_code
     ds~load_ref(),  ;; royalty_params
     second_owner,
     ds~load_dict() ;; routers
     );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, slice second_owner_address, cell routers) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .store_slice(second_owner_address)
    .store_dict(routers)
    .end_cell());
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
  var msg = begin_cell()
    .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
    .store_slice(to_address)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::report_royalty_params(), 32)
    .store_uint(query_id, 64)
    .store_slice(data);
  send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, second_owner_address, routers) = load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }

    throw_unless(401, (equal_slices(sender_address, owner_address) | equal_slices(sender_address, second_owner_address)));

    if (op == op::mint()) { ;; deploy new campaign
      cell bc = in_msg_body~load_ref();

      slice body = bc.begin_parse();
      slice new_owner = body~load_msg_addr();
      int campaign_id = body~load_uint(64);
      int active_until = body~load_uint(64);

      deploy_nft_item(campaign_id, nft_item_code, 100000000, begin_cell()
            .store_slice(new_owner)
            .store_uint(active_until, 64)
            .store_int(true, 1)
            .store_dict(routers)
            .end_cell());
      save_data(owner_address, campaign_id, content, nft_item_code, royalty_params, second_owner_address, routers);
      return ();
    }

    if (op == op::batch_mint()) { ;; batch deploy of new nfts
      int counter = 0;
      cell deploy_list = in_msg_body~load_ref();
      do {
        var (_, item, f?) = deploy_list~udict::delete_get_min(64);
        if (f?) {
          counter += 1;
          if (counter >= 250) { ;; Limit due to limits of action list size
            throw(399);
          }

          ;; add default routers to each campaign
          cell content = item~load_ref();
          slice body = content.begin_parse();
          slice new_owner = body~load_msg_addr();
          int campaign_id = body~load_uint(64);
          int active_until = body~load_uint(64);

          deploy_nft_item(campaign_id, nft_item_code, item~load_coins(), begin_cell()
            .store_slice(new_owner)
            .store_uint(campaign_id, 64)
            .store_uint(active_until, 64)
            .store_dict(routers)
            .end_cell());
        }
      } until ( ~ f?);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, second_owner_address, routers);
      return ();
    }

    ;; handle owner/admin messages
    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == op::update_owner()) { ;; change main owner
      slice new_owner = in_msg_body~load_msg_addr();
      ;; also change second owner address if owner change
      save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, second_owner_address, routers);
      return ();
    }

    if (op == op::change_content()) { ;; change content
      save_data(owner_address, next_item_index, in_msg_body~load_ref(), nft_item_code, in_msg_body~load_ref(), second_owner_address, routers);
      return ();
    }

    if (op == op::withdraw_balance()) { ;; withdraw contract's balance
      raw_reserve(100000000, 0);
      slice to = in_msg_body~load_msg_addr();
      builder msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(to)
          .store_coins(0)
          .store_uint(0, 107);
      send_raw_message(msg.end_cell(), 128); ;; pay transfer fees separately, revert on errors
      return ();
    }

    if (op == op::update_second_owner()) { ;; change second owner
      slice new_second_owner = in_msg_body~load_msg_addr();
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, new_second_owner, routers);
      return ();
    }

    if (op == op::contract_upgrade()) { ;; update collection's code & data
      set_code(in_msg_body~load_ref());
      cell data = in_msg_body~load_maybe_ref();
      if(~ cell_null?(data)) {
        set_data(data);
      }
      return ();
    }

    if (op == op::close_campaign()) { ;; close a specefic campaign
      int item_index = in_msg_body~load_uint(64);
      cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
      slice nft_address = calculate_nft_item_address(workchain(), state_init);
      send_msg(flag::regular(), nft_address, 0, op::close_campaign(), query_id, null(), 64); ;; paying fees, ignore errors
      return ();
    }

    if (op == op::open_campaign()) { ;; open a specefic campaign
      int item_index = in_msg_body~load_uint(64);
      cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
      slice nft_address = calculate_nft_item_address(workchain(), state_init);
      send_msg(flag::regular(), nft_address, 0, op::open_campaign(), query_id, null(), 64); ;; paying fees, ignore errors
      return ();
    }

    if (op == op::add_router()) { ;; add a router
      slice router_address = in_msg_body~load_msg_addr();
      int router_id = router_address.skip_bits(11).preload_uint(256);
      routers~udict_set_ref(256, router_id, in_msg_body~load_ref());
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, second_owner_address, routers);
      return ();
    }

    if (op == op::del_router()) { ;; delete a router
      slice router_address = in_msg_body~load_msg_addr();
      int router_id = router_address.skip_bits(11).preload_uint(256);
      routers~udict_delete?(256, router_id);
      save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, second_owner_address, routers);
      return ();
    }

    if (op == op::destroy()) { ;; destroy a specific campaign
      int item_index = in_msg_body~load_uint(64);
      cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
      slice nft_address = calculate_nft_item_address(workchain(), state_init);
      send_msg(flag::regular(), nft_address, 0, op::destroy(), query_id, null(), 64); ;; paying fees, ignore errors
      return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, next_item_index, content, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

(int, int, slice) royalty_params() method_id {
     var (_, _, _, _, royalty, _, _) = load_data();
     slice rs = royalty.begin_parse();
     return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, content, _, _, _, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}

(slice) get_second_owner_address() method_id {
  var (_, _, _, _, _, second_owner_address, _) = load_data();
  return (second_owner_address);
}

(cell) get_routers() method_id {
  var (_, _, _, _, _, _, routers) = load_data();
  return (routers);
}
