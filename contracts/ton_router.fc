#include "imports/stdlib.fc";
#include "./op-codes.fc";
#include "./utils.fc";
#include "./params.fc";
#include "./jetton-utils.fc";
#include "./constants.fc";

(int, int, int, int, int, int, int, slice, slice, cell, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_int(1), ;; is_active
    ds~load_uint(32), ;; seqno
    ds~load_coins(), ;; ptj balance
    ds~load_coins(), ;; min burn amount
    ds~load_coins(), ;; burn storage
    ds~load_uint(64) + PTJ_JETTON_ID, ;; jetton id (name)
    ds~load_uint(256), ;; public_key
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; second_owner
    ds~load_ref(), ;; master_address and jetton_wallet_code
    ds~load_ref(), ;; factors
    ds~load_ref() ;; exchange_rate
  );
}

() save_data(int is_active, int public_key, int jetton_balance, int seqno, int min_burn, int burn_storage, int jetton_id, slice owner_address, slice second_owner, slice jetton_master_address, cell jetton_wallet_code, cell factors, cell exchange_rate) impure inline {
  set_data(
    begin_cell()
      .store_int(is_active, 1)
      .store_uint(seqno, 32)
      .store_coins(jetton_balance)
      .store_coins(min_burn)
      .store_coins(burn_storage)
      .store_uint(jetton_id - PTJ_JETTON_ID, 64)
      .store_uint(public_key, 256)
      .store_slice(owner_address)
      .store_slice(second_owner)
      .store_ref(
        begin_cell()
          .store_slice(jetton_master_address)
          .store_ref(jetton_wallet_code)
        .end_cell()
      )
      .store_ref(factors)
      .store_ref(exchange_rate)
    .end_cell()
  );
}

() send_hurray_ton(slice donor, slice to, int forward_ton, int query_id) impure inline {
  builder msg = begin_cell()
          .store_uint(0x10, 6)
          .store_slice(to)
          .store_coins(forward_ton)
          .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
          .store_ref(
            begin_cell()
              .store_uint(op::hurray_ton(), 32)
              .store_uint(query_id, 64)
              .store_slice(donor)
            .end_cell()
          );
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }
  slice sender_address = cs~load_msg_addr();

  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();

  slice jetton_wallet_slice = jetton_wallet.begin_parse();
  slice jetton_master_address = jetton_wallet_slice~load_msg_addr();
  cell jetton_wallet_code = jetton_wallet_slice~load_ref();

  if(op == op::jetton_transfer_notification()) { ;; jetton transfer notification
    cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
    throw_unless(501, equal_slices(jetton_wallet_address, sender_address));

    int amount = in_msg_body~load_coins();

    jetton_balance += amount;

    save_data(is_active, public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, owner_address, second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);

    return ();
  }

  if (op == op::contract_upgrade()) { ;; update code & data
    throw_unless(401, equal_slices(sender_address, owner_address));

    cell new_code = in_msg_body~load_ref();
    set_code(new_code);

    cell new_data = in_msg_body~load_maybe_ref();
    ifnot (new_data.null?()) {
      set_data(new_data);
    }

    return ();
  }

  throw_unless(502, is_active);

  if (op == op::donate()) {
    throw_unless(709, msg_value >=
    200000000 +
    3 * fwd_fee +
    (2 * gas_consumption() + min_tons_for_storage()));

    slice nft_address = in_msg_body~load_msg_addr();

    slice factors_slice = factors.begin_parse();
    (int fee_factor, int fee_base, int burn_factor, int burn_base, int min_exchange_rate, int max_exchange_rate, int pure_burn_factor, int pure_burn_base, int reward_factor, int reward_base) = (factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16));

    slice exchange_rate_slice = exchange_rate.begin_parse();
    (int exchange_factor, int exchange_base) = (exchange_rate_slice~load_uint(16), exchange_rate_slice~load_uint(16));

    int burn_amount = 0;
    int is_pure = in_msg_body~load_int(1);
    if(~ is_pure) {
      int ptj_equivalent = muldiv(exchange_factor, msg_value, exchange_base);
      ;; transfer jettons to the campaign (we expect that we have enought PTJ jettons in this router (as a vault))
      jetton_balance -= ptj_equivalent;
      transfer_jetton(jetton_master_address, jetton_wallet_code, query_id, nft_address, ptj_equivalent, 200000000, 50000000);
      ;; send hurray to the campaign and to update it's balance map
      send_hurray(sender_address, nft_address, 50000000, PTJ_JETTON_ID, ptj_equivalent, query_id);

      burn_amount = muldiv(burn_factor, ptj_equivalent, burn_base);
    } else { ;; pure ton donation
      ;; calculate fee
      int fee = muldiv(fee_factor, msg_value, fee_base);
      fee = max(100000000, fee);

      int fee_ptj_equivalent = muldiv(exchange_factor, fee, exchange_base);

      msg_value = msg_value - fee;

      ;; calculate burn amount
      burn_amount = muldiv(pure_burn_factor, fee_ptj_equivalent, pure_burn_base);

      ;; send hurray
      send_hurray_ton(sender_address, nft_address, msg_value, query_id);
    }

    ;; calculate donor reward
    int donor_reward = muldiv(reward_factor, burn_amount, reward_base);

    ;; send donor ptj rewards
    if (donor_reward >= 10000000000) {
      jetton_balance -= donor_reward;
      transfer_jetton(jetton_master_address, jetton_wallet_code, query_id, sender_address, donor_reward, 100000000, 0);
    }

    if(burn_amount > 0) {
      if(burn_storage + burn_amount >= min_burn) {
        cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
        slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
        builder burn_msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_wallet_address)
        .store_coins(fwd_fee + 3 * gas_consumption())
        .store_uint(1, 107)
        .store_ref(
          begin_cell()
          .store_uint(op::burn_jetton(), 32)
          .store_uint(query_id, 64)
          .store_coins(burn_storage + burn_amount)
          .store_slice(my_address()) ;; check this later
          .store_maybe_ref(null())
          .end_cell()
        );
        send_raw_message(burn_msg.end_cell(), 1);
        burn_storage = 0;
        jetton_balance -=  burn_storage + burn_amount;
      } else {
        burn_storage += burn_amount;
        jetton_balance -= burn_amount;
      }
    }

    save_data(is_active,public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, owner_address, second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);

    return ();
  }

  if (op == op::update_owner()) { ;; change owner_address
    throw_unless(401, equal_slices(sender_address, owner_address));
    save_data(is_active,public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, in_msg_body~load_msg_addr(), second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);
    return ();
  }

  if (op == op::update_second_owner()) { ;; change second_owner address
    throw_unless(401, equal_slices(sender_address, owner_address));
    save_data(is_active,public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, owner_address, in_msg_body~load_msg_addr(), jetton_master_address, jetton_wallet_code, factors, exchange_rate);
    return ();
  }

  if (op == op::update_contract_status()) { ;; update contrac's status (is_active)
    throw_unless(401, equal_slices(sender_address, owner_address));
    save_data(in_msg_body~load_int(1),public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, owner_address, second_owner, jetton_master_address, jetton_wallet_code, factors, exchange_rate);
    return ();
  }

  if (op == op::update_factors()) { ;; update factors
    throw_unless(401, equal_slices(sender_address, owner_address));
    save_data(is_active,public_key, jetton_balance, seqno, min_burn, burn_storage, jetton_id, owner_address, second_owner, jetton_master_address, jetton_wallet_code, in_msg_body~load_ref(), exchange_rate);
    return ();
  }

  if (op == op::withdraw_jetton_balance()) { ;; withdraw jettons
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice to = in_msg_body~load_msg_addr();
    int amount = in_msg_body~load_coins();

    cell msg = begin_cell()
    .store_uint(op::transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(amount) ;; jetton amount
    .store_slice(to) ;; destination
    .store_slice(to) ;; response_address
    .store_uint(0, 1)
    .store_coins(0)
    .store_uint(0, 1)
    .end_cell();

    cell state_init = calculate_jetton_wallet_state_init(my_address(), jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg_body = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(msg);
    send_raw_message(msg_body.end_cell(), 64);

    return ();
  }

  if (op == op::withdraw_balance()) { ;; withdraw contract's balance
    throw_unless(401, equal_slices(sender_address, owner_address));

    raw_reserve(100000000, 0);
    slice to = in_msg_body~load_msg_addr();
    builder msg = begin_cell()
    .store_uint(0x10, 6)
    .store_slice(to)
    .store_coins(0)
    .store_uint(0, 107);
    send_raw_message(msg.end_cell(), 128); ;; pay transfer fees separately, revert on errors
    return ();
  }

  throw(0xffff);
}

;; External receiver
() recv_external(slice in_msg) impure {
    int op = in_msg~load_uint(32);

    if(op == op::update_exchange_rate()) { ;; update exchange rate
      int query_id = in_msg~load_uint(64);
      slice signature = in_msg~load_bits(512);

      cell refc = in_msg~load_ref();
      int hash = cell_hash(refc);
      slice refs = refc.begin_parse();
      (int msg_seqno, int valid_until, int exchange_factor, int exchange_base) = (refs~load_uint(32), refs~load_uint(32), refs~load_uint(16), refs~load_uint(16));
      throw_if(36, valid_until <= now());

      (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
      slice jetton_wallet_slice = jetton_wallet.begin_parse();
      slice jetton_master_address = jetton_wallet_slice~load_msg_addr();
      cell jetton_wallet_code = jetton_wallet_slice~load_ref();

      throw_unless(33, msg_seqno == seqno);
      throw_unless(120, check_signature(hash, signature, public_key));

      slice factors_slice = factors.begin_parse();
      (int fee_factor, int fee_base, int burn_factor, int burn_base, int min_exchange_rate, int max_exchange_rate, int pure_burn_factor, int pure_burn_base, int reward_factor, int reward_base) = (factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16), factors_slice~load_uint(16));

      int new_exchange_rate = muldiv(exchange_factor, 1, exchange_base);
      throw_if(119, (new_exchange_rate < min_exchange_rate)); ;;  | (new_exchange_rate > max_exchange_rate)

      accept_message();

      save_data(is_active,public_key, jetton_balance, seqno + 1, min_burn, burn_storage, jetton_id, owner_address, second_owner, jetton_master_address, jetton_wallet_code, factors, begin_cell().store_uint(exchange_factor, 16).store_uint(exchange_base, 16).end_cell());

      commit();

      return();
    }

    throw(0xffff);
}

;; Getters

int is_active() method_id {
  return get_data().begin_parse().preload_int(1);
}

int seqno() method_id {
  return get_data().begin_parse().skip_bits(1).preload_uint(32);
}

int jetton_id() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange) = load_data();
  return jetton_id;
}

(int, int) get_exchange_rate() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange) = load_data();
  slice exchange_rate = exchange.begin_parse();
  (int factor, int base) = (exchange_rate~load_uint(16), exchange_rate~load_uint(16));
  return (factor, base);
}

int get_jetton_balance() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
  return jetton_balance;
}

(int, int) get_burn_details() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
  return (min_burn, burn_storage);
}

(cell) get_factors() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
  return (factors);
}

(slice, slice) get_addresses() method_id {
  (int is_active, int seqno, int jetton_balance, int min_burn, int burn_storage, int jetton_id, int public_key, slice owner_address, slice second_owner, cell jetton_wallet, cell factors, cell exchange_rate) = load_data();
  return (owner_address, second_owner);
}
